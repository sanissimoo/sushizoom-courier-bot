import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("CHAT_ID")  # –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ —è–∫ -1001234567890

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_address = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä'—î—Ä–∞
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(
    KeyboardButton("üöó –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É"),
    KeyboardButton("‚è±Ô∏è –ó–∞—Ç—Ä–∏–º—É—é—Å—å")
).add(
    KeyboardButton("üìç –ü—Ä–∏–±—É–≤"),
    KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É")
)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "üöó –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É")
async def process_start_delivery(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await Form.waiting_for_address.set()

@dp.message_handler(state=Form.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    user = message.from_user
    username = user.username or user.first_name or "–ö—É—Ä'—î—Ä"
    address = message.text

    msg = f"üöó –ö—É—Ä'—î—Ä @{username} –ø—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É.\nüìç –ê–¥—Ä–µ—Å–∞: {address}"
    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    except Exception as e:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logging.error(f"Error sending message to group: {e}")

    # –í–∏–¥–∞–ª—è—î–º–æ –∞–¥—Ä–µ—Å—É –∑ —á–∞—Ç—É –∫—É—Ä'—î—Ä–∞
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except:
        pass

    await state.finish()
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–π–Ω—è—Ç–æ. –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "‚è±Ô∏è –ó–∞—Ç—Ä–∏–º—É—é—Å—å")
async def delay_handler(message: types.Message):
    username = message.from_user.username or message.from_user.first_name or "–ö—É—Ä'—î—Ä"
    msg = f"‚è±Ô∏è @{username} –ø–æ–≤—ñ–¥–æ–º–∏–≤(–ª–∞), —â–æ –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è."
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await message.answer("–ó–∞—Ç—Ä–∏–º–∫–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞.", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "üìç –ü—Ä–∏–±—É–≤")
async def arrived_handler(message: types.Message):
    username = message.from_user.username or message.from_user.first_name or "–ö—É—Ä'—î—Ä"
    msg = f"üìç @{username} –ø—Ä–∏–±—É–≤ –Ω–∞ –∞–¥—Ä–µ—Å—É."
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await message.answer("–ü—Ä–∏–±—É—Ç—Ç—è –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É")
async def complete_handler(message: types.Message):
    username = message.from_user.username or message.from_user.first_name or "–ö—É—Ä'—î—Ä"
    msg = f"‚úÖ @{username} –∑–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É."
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await message.answer("–î–æ—Å—Ç–∞–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=main_keyboard)

if __name__ == '__main__':
    import requests

    # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    try:
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        CHAT_ID = os.getenv("CHAT_ID")
        TEXT = "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–∏—Å–∞—Ç–∏ –≤ –≥—Ä—É–ø—É."

        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": TEXT}
        response = requests.post(url, data=payload)
        print("–í—ñ–¥–ø–æ–≤—ñ–¥—å Telegram:", response.json())
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e)

    executor.start_polling(dp, skip_updates=True)

