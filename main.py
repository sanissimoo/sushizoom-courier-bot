import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)
import os

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("CHAT_ID"))

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
CHOOSING, TYPING_ADDRESS = range(2)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–Ω–æ–ø–∫–∏
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöó –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="accept")],
    [InlineKeyboardButton("‚è± –ó–∞—Ç—Ä–∏–º—É—é—Å—å", callback_data="delay"),
     InlineKeyboardButton("üìç –ü—Ä–∏–±—É–≤", callback_data="arrived")],
    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="done")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    action = query.data

    if action == "accept":
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return TYPING_ADDRESS

    messages = {
        "delay": "‚è± –ö—É—Ä'—î—Ä –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è",
        "arrived": "üìç –ö—É—Ä'—î—Ä –ø—Ä–∏–±—É–≤ –Ω–∞ –∞–¥—Ä–µ—Å—É",
        "done": "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }

    if action in messages:
        text = f"{messages[action]}\n–ö—É—Ä'—î—Ä: @{user.username or user.first_name}"
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
        return CHOOSING

# –ü—Ä–∏–π–æ–º –∞–¥—Ä–µ—Å–∏
async def received_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    address = update.message.text
    text = (
        f"üöó –ö—É—Ä'—î—Ä –ø—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n"
        f"–ö—É—Ä'—î—Ä: @{user.username or user.first_name}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
    await update.message.reply_text("–î—è–∫—É—é! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    return CHOOSING

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(button_handler)],
            TYPING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
