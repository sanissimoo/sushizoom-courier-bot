import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("CHAT_ID"))

CHOOSING, TYPING_ADDRESS = range(2)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

keyboard = ReplyKeyboardMarkup(
    [
        ["üöó –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É", "‚è± –ó–∞—Ç—Ä–∏–º—É—é—Å—å"],
        ["üìç –ü—Ä–∏–±—É–≤", "‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É"]
    ],
    resize_keyboard=True
)

# /start —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    user = update.effective_user
    text = update.message.text

    if text == "üöó –ü—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return TYPING_ADDRESS

    messages = {
        "‚è± –ó–∞—Ç—Ä–∏–º—É—é—Å—å": "‚è± –ö—É—Ä'—î—Ä –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è",
        "üìç –ü—Ä–∏–±—É–≤": "üìç –ö—É—Ä'—î—Ä –ø—Ä–∏–±—É–≤ –Ω–∞ –∞–¥—Ä–µ—Å—É",
        "‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤ –¥–æ—Å—Ç–∞–≤–∫—É": "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }

    if text in messages:
        full_message = f"{messages[text]}\n–ö—É—Ä'—î—Ä: @{user.username or user.first_name}"
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=full_message)

    return CHOOSING

# –í–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    user = update.effective_user
    address = update.message.text

    full_message = (
        f"üöó –ö—É—Ä'—î—Ä –ø—Ä–∏–π–Ω—è–≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n"
        f"–ö—É—Ä'—î—Ä: @{user.username or user.first_name}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=full_message)
    await update.message.reply_text("–î—è–∫—É—é! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    return CHOOSING

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=keyboard)
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            TYPING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
